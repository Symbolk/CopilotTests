from math import ceil


def sequential_int_key_ranges(queryset, shard_count):
    """
        Given a queryset and a number of shards.
        This function generate key-ranges for a model with
        an integer, dense, sequential primary key, which is usually the default
        when using a SQL backend with autogenerated pks.
    """
    biggest = queryset.order_by("-pk").values("pk")[0]["pk"]
    size = ceil(biggest / shard_count)
    if biggest < shard_count:
        shard_count = biggest
        size = 1
    key_ranges = [(i * size, (i + 1) * size) for i in range(shard_count)]
    # If biggest/shard is a whole number, we'd lose the last element (otherwise "ceil" will fix it)
    # e.g. 1000/10 = 100, last range would be (900, 1000), which is off by one
    key_ranges[-1] = (biggest - size, biggest + 1)
    return key_ranges




def test_sequential_int_key_ranges():
    """Check the correctness of sequential_int_key_ranges
    """
    assert  